# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog, Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("Rice", "Chicken", "Broccoli")
meals <- list(c(dinner, meals))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog, Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(c("dinner" = c("Rice", "Chicken", "Broccoli"), meals))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog, Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- c(list("dinner" = c("Rice", "Chicken", "Broccoli"), meals))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
lunch <- meals[[lunch]]
lunch <- meals[["lunch"]]
early_meals <- list(meals[1:2])
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog, Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog", "Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- c(list("dinner" = c("Rice", "Chicken", "Broccoli"), meals))
lunch <- meals[['lunch']]
meals <- list("dinner" = c("Rice", "Chicken", "Broccoli"), meals)
lunch <- meals[['lunch']]
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog", "Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- c(meals, "dinner" = c("Rice", "Chicken", "Broccoli"))
dinner <- c(meals$dinner)
dinner <- c(meals$dinner)
dinner <- c(meals$dinner)
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog", "Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- c(meals, "dinner" = c("Rice", "Chicken", "Broccoli"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# for dinner
meals <- c(meals, "dinner" = c("Rice", "Chicken", "Broccoli"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$breakfast
my_lunch <- c("Small hotdog", "Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, "dinner" = c("Rice", "Chicken", "Broccoli"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
lunch <- meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Bacon", "Apple Juice", "French Toast")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Small hotdog", "Big hotdog")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, "dinner" = c("Rice", "Chicken", "Broccoli"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
lunch <- meals[['lunch']]
early_meals <- list(meals[1:2])
Employee <- paste("Employee", 1:100)
Employee
salaries_2017 <- runif(100, 40000, 50000)
salaries_2017
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
adjustments
salaries_2018 <- salaries_2017 + adjustments
salaries_2018
salaries <- data.frame(Employee, salaries_2017, ajustments, stringsAsFactors = FALSE)
View(salaries)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee, salaries_2017, ajustments, stringsAsFactors = FALSE)
View(salaries)
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee, salaries_2017, adjustments, stringsAsFactors = FALSE)
View(salaries)
salaries_2018 <- salaries_2017 + adjustments
salaries <- cbind.data.frame(salaries_2018)
salaries_2018 <- salaries_2017 + adjustments
salaries <- cbind.data.frame(salaries_2018)
print(salaries)
salaries_2018 <- salaries_2017 + adjustments
salaries <- cbind.data.frame(salaries ,salaries_2018)
print(salaries)
Employee <- paste("Employee", 1:100)
Employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries_2017 + adjustments
salaries <- cbind.data.frame(salaries, data.frame(salaries_2018))
print(salaries)
View(salaries)
got_raise <- (salaries_2017 < salaries_2018)
salaries <- cbind.data.frame(salaries, data.frame(got_raise))
View(salaries)
print(salaries[57, "salaries_2018"])
# How many employees got a raise?
length(salaries[got_raise == TRUE])
length(salaries[got_raise == "TRUE"])
length(salaries[, got_raise == "TRUE"])
raise <- salaries[got_raise == TRUE]
length(raise)
raise <- salaries[, got_raise == TRUE]
length(raise)
print(salaries["Employee 57", "salaries_2018"])
print(length(got_raise[got_raise == TRUE]))
print(salaries[57, "salaries_2018"])
print(max(adjustments))
pwd
setwd("d:/Education/UW/Informatics/INFO201/book-exercises/exercise-4")
grants <- read.csv(data/gates_money.csv)
setwd("d:/Education/UW/Informatics/INFO201/book-exercises/chapter-10-exercises/exercise-4/data")
grants <- read.csv(data/gates_money.csv)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
setwd("d:/Education/UW/Informatics/INFO201/book-exercises/chapter-10-exercises/exercise-4/")
grants <- read.csv(data/gates_money.csv)
# Use the View function to look at the loaded data
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
setwd("d:/Education/UW/Informatics/INFO201/book-exercises/chapter-10-exercises/exercise-4/")
grants <- read.csv(data/gates_money)
grants <- read.csv("data/gates_money")
grants <- read.csv("data/gates_money.csv")
View(grants)
#install.packages("stringr")
#################
#### PART 1 #####
#################
#1 Variable with my age.
my_age <- 19
#2 Variable with my name.
my_name <- "Jonathan"
#3 Returns an introduction of a person by giving out their name and age.
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(intro)
}
#4 Calls and prints the introduction.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5 Makes the introduction slightly more casual and prints it.
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
#6 Capitalizes the first letter of every word in the introduction and prints it.
capital_intro <- stringr::str_to_title(my_intro)
print(capital_intro)
#7 Counts the number of the times the character "e" appears in the introduction and prints the count.
intro_e_count <- stringr::str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#1 A vector of six books I like. Prints the vector.
books <- c("I Am Number Four", "The Power of Six", "The Rise of Nine", "The Fall of Five", "The Revenge of Seven", "The Fate of Ten")
print(books)
#2 The first three books I named. Prints the vector.
top_three_books <- c(books[1:3])
print(top_three_books)
#3 Gives a good review of each book above and prints it.
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#4 Returns a list of books after one book is removed by its index.
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
return(book_titles)
}
#5 The list of books without the fifth book. Prints it.
books_without_five <- remove_book(books, 5)
print(books_without_five)
#6 Stores the books which have more than 15 characters in its title and prints it.
long_titles <- subset(books, stringr::str_length(books) > 15)
print(long_titles)
#################
#### PART 3 #####
#################
#1 Stores numbers from 1 to 201.
numbers <- c(1:201)
#2 Stores the numbers from 1 to 201 multiplied by themselves.
squared_numbers <- c(numbers * numbers)
#3 The mean of the numbers from 1 to 201 multiplied by themselves and prints it.
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4 The median of the numbers from 1 to 201 multiplied by themselves and prints it.
squared_median <- median(squared_numbers)
print(squared_median)
#5 All numbers from 1 to 201 that have a whole numbers as its square root. Prints it.
perfect_squares <- subset(numbers, sqrt(numbers) == round(sqrt(numbers)))
print(perfect_squares)
#################
#### PART 4 #####
#################
#1 The date of the first day of Spring Break in the year 2020.
spring_break <- as.Date("21/03/2020", "%d/%m/%y")
#2 The type of variable that the first of day of Spring Break in 2020 is.
class(spring_break)
#3 Stores the current date.
today <- Sys.Date()
#4 The number of days until spring break in 2020. Prints it.
days_to_break <- spring_break - today
print(days_to_break)
#5 Returns a new date after changing the date from one year to another year.
change_year <- function(date_to_change, year) {
# Changes the date to character format.
date_as_string <- as.character(date_to_change)
# Replaces the given year of the date with the required year.
date_as_string <- substr(date_as_string, 5, nchar(date_as_string))
date_as_string <- paste0(year, date_as_string)
# Format the date in character format.
date_as_string <- gsub("-", "/", date_as_string)
# Changes the date from character format to date format.
new_date <- as.Date(date_as_string, "%Y/%m/%d")
return(new_date)
}
#6 The date of spring break in the year 2025.
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
print(spring_break_2025)
#7 Returns true if the given date has passed, false if not.
date_has_passed <- function(date, ignore_year = FALSE) {
if (ignore_year) {
current_year <- substr(date_as_string, 1, 4)
return(Sys.Date() - change_year(date, current_year))
} else {
diff <- Sys.Date() - date
return(diff > 0)
}
}
#8 Deadline of this assignment and prints whether or not the deadline date has passed.
print(date_has_passed(as.Date("2020-01-23")))
#9 A list of the birthdays of people in my family. Prints it.
birthdays <- list("Jonathan" = as.Date("2000-02-25"), "Michelle" = as.Date("2001-01-19"), "Sheba" = as.Date("1967-05-04"), "Jerry" = as.Date("1963-10-09"))
print(birthdays)
#10 Returns the date of the upcoming birthday.
get_next_birthday <- function(birthday) {
# Changes the year of my birthday to the year 2020.
next_birthday <- change_year(birthday, 2020)
# Checks to see if my birthday has passed in the year 2020.
has_date_passed <- date_has_passed(next_birthday)
# Changes the next birthday to the year 2021 if my birthday has already passed in 2020.
if (has_date_passed) {
next_birthday <- change_year(birthday, 2021)
}
return(next_birthday)
}
#11 Prints my upcoming birthday.
print(get_next_birthday(birthdays$Jonathan))
#12 A list of the upcoming birthdays of the people in my family. Prints it.
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
print(spring_break_2025)
print(date_as_string)
change_year <- function(date_to_change, year) {
# Changes the date to character format.
date_as_string <- as.character(date_to_change)
# Replaces the given year of the date with the required year.
date_as_string <- substr(date_as_string, 5, nchar(date_as_string))
date_as_string <- paste0(year, date_as_string)
print(date_as_string)
# Format the date in character format.
date_as_string <- gsub("-", "/", date_as_string)
# Changes the date from character format to date format.
new_date <- as.Date(date_as_string, "%Y/%m/%d")
return(new_date)
}
#6 The date of spring break in the year 2025.
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
print(spring_break_2025)
change_year <- function(date_to_change, year) {
# Changes the date to character format.
date_as_string <- as.character(date_to_change)
# Replaces the given year of the date with the required year.
date_as_string <- substr(date_as_string, 5, nchar(date_as_string))
date_as_string <- paste(year, date_as_string)
print(date_as_string)
# Format the date in character format.
date_as_string <- gsub("-", "/", date_as_string)
# Changes the date from character format to date format.
new_date <- as.Date(date_as_string, "%Y/%m/%d")
return(new_date)
}
#6 The date of spring break in the year 2025.
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
print(spring_break_2025)
change_year <- function(date_to_change, year) {
# Changes the date to character format.
date_as_string <- as.character(date_to_change)
# Replaces the given year of the date with the required year.
date_as_string <- substr(date_as_string, 5, nchar(date_as_string))
date_as_string <- paste0(year, date_as_string)
print(date_as_string)
# Format the date in character format.
date_as_string <- gsub("-", "/", date_as_string)
# Changes the date from character format to date format.
new_date <- as.Date(date_as_string, "%Y/%m/%d")
return(new_date)
}
#6 The date of spring break in the year 2025.
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
print(spring_break_2025)
spring_break <- as.Date("21/03/2020", "%d/%m/%y")
#2 The type of variable that the first of day of Spring Break in 2020 is.
class(spring_break)
#3 Stores the current date.
today <- Sys.Date()
#4 The number of days until spring break in 2020. Prints it.
days_to_break <- spring_break - today
class(days_to_break)
print(days_to_break)
